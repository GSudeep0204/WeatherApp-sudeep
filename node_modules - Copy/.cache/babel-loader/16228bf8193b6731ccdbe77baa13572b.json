{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gudekota sudeep\\\\Desktop\\\\PROJECTS\\\\weather-app\\\\weather\\\\src\\\\Components\\\\Actions.jsx\";\nimport axios from \"axios\";\nimport { AppContext } from \"../Context/AppContext\";\nimport { GET_DATA_ERROR, GET_DATA_SUCCESS, GET_DATA_LOADING } from \"./Actiontypes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getdataloading = () => {\n  return {\n    type: GET_DATA_LOADING\n  };\n};\n\nconst getdatasuccess = payload => {\n  return {\n    type: GET_DATA_SUCCESS,\n    payload\n  };\n};\n\nconst getdataerror = () => {\n  return {\n    type: GET_DATA_ERROR\n  };\n};\n\nexport function GetweatherByCity(e) {\n  console.log(e);\n\n  const axios = require(\"axios\");\n\n  const forecast = {\n    method: 'GET',\n    url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\n    params: {\n      q: `${e}`,\n      // lat: '35',\n      // lon: '139',\n      cnt: '10',\n      units: 'metric'\n    },\n    headers: {\n      'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\n      'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\n    }\n  };\n  axios.request(forecast).then(function (response) {\n    console.log(response.data);\n  }).catch(function (error) {\n    console.error(error);\n  });\n  let weatherdata = axios({\n    url: `http://api.weatherapi.com/v1/current.json?key=1ed8289ee0e54db88d1104939222906&q=${e}`\n  }).then(res => {\n    console.log(res.data);\n    console.log(forecast);\n  }).catch(err => {\n    return err;\n  });\n  let payload = {\n    weatherdata\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudeep\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n}\n_c = GetweatherByCity;\nexport default function GetweatherByLocation() {\n  const location = position => {\n    const {\n      lontitude,\n      longitude\n    } = position.coord;\n  };\n}\n_c2 = GetweatherByLocation;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetweatherByCity\");\n$RefreshReg$(_c2, \"GetweatherByLocation\");","map":{"version":3,"names":["axios","AppContext","GET_DATA_ERROR","GET_DATA_SUCCESS","GET_DATA_LOADING","getdataloading","type","getdatasuccess","payload","getdataerror","GetweatherByCity","e","console","log","require","forecast","method","url","params","q","cnt","units","headers","request","then","response","data","catch","error","weatherdata","res","err","GetweatherByLocation","location","position","lontitude","longitude","coord"],"sources":["C:/Users/gudekota sudeep/Desktop/PROJECTS/weather-app/weather/src/Components/Actions.jsx"],"sourcesContent":["import axios from \"axios\"\r\nimport { AppContext } from \"../Context/AppContext\";\r\nimport { GET_DATA_ERROR , GET_DATA_SUCCESS, GET_DATA_LOADING } from \"./Actiontypes\";\r\n\r\nconst getdataloading = ()=>{\r\n  return {type:GET_DATA_LOADING};\r\n}\r\n\r\nconst getdatasuccess = (payload)=>{\r\n  return {type:GET_DATA_SUCCESS,payload}\r\n}\r\n\r\nconst getdataerror = ()=>{\r\n  return {type:GET_DATA_ERROR}\r\n}\r\n\r\nexport  function GetweatherByCity(e){\r\nconsole.log(e);\r\nconst axios = require(\"axios\");\r\n\r\nconst forecast = {\r\n  method: 'GET',\r\n  url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\r\n  params: {\r\n    q: `${e}`,\r\n    // lat: '35',\r\n    // lon: '139',\r\n     cnt: '10',\r\n    units: 'metric'\r\n  },\r\n  headers: {\r\n    'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\r\n    'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\r\n  }\r\n};\r\n\r\n  axios.request(forecast).then(function (response) {\r\n\tconsole.log(response.data);\r\n}).catch(function (error) {\r\n\tconsole.error(error);\r\n});\r\n\r\n  let weatherdata =  axios(\r\n  {url:`http://api.weatherapi.com/v1/current.json?key=1ed8289ee0e54db88d1104939222906&q=${e}`}\r\n  ).then((res)=>{\r\n      console.log(res.data);\r\n      console.log(forecast);\r\n  })\r\n  .catch((err)=>{\r\n      return err\r\n  })\r\n\r\n   let payload = {weatherdata}\r\n  return (\r\n      <div>\r\n          <h1>Sudeep</h1>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default function GetweatherByLocation(){\r\n  \r\n  const location = (position)=>{\r\n    const {lontitude,longitude} = position.coord;\r\n     \r\n  }\r\n}\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,cAAT,EAA0BC,gBAA1B,EAA4CC,gBAA5C,QAAoE,eAApE;;;AAEA,MAAMC,cAAc,GAAG,MAAI;EACzB,OAAO;IAACC,IAAI,EAACF;EAAN,CAAP;AACD,CAFD;;AAIA,MAAMG,cAAc,GAAIC,OAAD,IAAW;EAChC,OAAO;IAACF,IAAI,EAACH,gBAAN;IAAuBK;EAAvB,CAAP;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAG,MAAI;EACvB,OAAO;IAACH,IAAI,EAACJ;EAAN,CAAP;AACD,CAFD;;AAIA,OAAQ,SAASQ,gBAAT,CAA0BC,CAA1B,EAA4B;EACpCC,OAAO,CAACC,GAAR,CAAYF,CAAZ;;EACA,MAAMX,KAAK,GAAGc,OAAO,CAAC,OAAD,CAArB;;EAEA,MAAMC,QAAQ,GAAG;IACfC,MAAM,EAAE,KADO;IAEfC,GAAG,EAAE,kEAFU;IAGfC,MAAM,EAAE;MACNC,CAAC,EAAG,GAAER,CAAE,EADF;MAEN;MACA;MACCS,GAAG,EAAE,IAJA;MAKNC,KAAK,EAAE;IALD,CAHO;IAUfC,OAAO,EAAE;MACP,kBAAkB,oDADX;MAEP,mBAAmB;IAFZ;EAVM,CAAjB;EAgBEtB,KAAK,CAACuB,OAAN,CAAcR,QAAd,EAAwBS,IAAxB,CAA6B,UAAUC,QAAV,EAAoB;IAClDb,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAACC,IAArB;EACA,CAFC,EAECC,KAFD,CAEO,UAAUC,KAAV,EAAiB;IACzBhB,OAAO,CAACgB,KAAR,CAAcA,KAAd;EACA,CAJC;EAMA,IAAIC,WAAW,GAAI7B,KAAK,CACxB;IAACiB,GAAG,EAAE,mFAAkFN,CAAE;EAA1F,CADwB,CAAL,CAEjBa,IAFiB,CAEXM,GAAD,IAAO;IACVlB,OAAO,CAACC,GAAR,CAAYiB,GAAG,CAACJ,IAAhB;IACAd,OAAO,CAACC,GAAR,CAAYE,QAAZ;EACH,CALkB,EAMlBY,KANkB,CAMXI,GAAD,IAAO;IACV,OAAOA,GAAP;EACH,CARkB,CAAnB;EAUC,IAAIvB,OAAO,GAAG;IAACqB;EAAD,CAAd;EACD,oBACI;IAAA,uBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKD;KA1CgBnB,gB;AA4CjB,eAAe,SAASsB,oBAAT,GAA+B;EAE5C,MAAMC,QAAQ,GAAIC,QAAD,IAAY;IAC3B,MAAM;MAACC,SAAD;MAAWC;IAAX,IAAwBF,QAAQ,CAACG,KAAvC;EAED,CAHD;AAID;MANuBL,oB"},"metadata":{},"sourceType":"module"}