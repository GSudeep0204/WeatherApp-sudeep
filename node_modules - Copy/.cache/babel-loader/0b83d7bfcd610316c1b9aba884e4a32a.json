{"ast":null,"code":"import axios from \"axios\";\nimport { AppContext } from \"../Context/AppContext\";\nimport { myToast } from \"../Extras/Extras\";\nimport { useContext } from \"react\";\nimport { GET_DATA_ERROR, GET_DATA_SUCCESS, GET_DATA_LOADING } from \"./Actiontypes\";\n\nconst getdataloading = () => {\n  return {\n    type: GET_DATA_LOADING\n  };\n};\n\nconst getdatasuccess = payload => {\n  return {\n    type: GET_DATA_SUCCESS,\n    payload\n  };\n};\n\nconst getdataerror = () => {\n  return {\n    type: GET_DATA_ERROR\n  };\n};\n\nexport async function GetweatherByCity(e, dispatch, toast) {\n  try {\n    const axios = require(\"axios\");\n\n    const options = {\n      method: 'GET',\n      url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\n      params: {\n        q: `${e}`,\n        // lat: '35',\n        // lon: '139',\n        cnt: '8',\n        units: 'metric'\n      },\n      headers: {\n        'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\n        'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\n      }\n    };\n    let forecast = await axios.request(options);\n    let weather = await axios({\n      url: `https://api.openweathermap.org/data/2.5/weather?q=${e}&=&appid=fe3c983df64d3e2dd4227bf73441ae78&units=metric`\n    });\n    let weatherData = weather.data;\n    let forecastData = forecast.data;\n    let payload = {\n      weatherData,\n      forecastData\n    };\n    dispatch(getdatasuccess(payload));\n    myToast(toast, \"City Weather Data Updated\", \"\");\n  } catch (e) {\n    console.log(e);\n    dispatch(getdataerror());\n  }\n}\n_c = GetweatherByCity;\nexport default function GetweatherByLocation(toast, dispatch) {\n  const location = async position => {\n    try {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      dispatch(getdataloading());\n      const options = {\n        method: 'GET',\n        url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\n        params: {\n          lat: `${latitude}`,\n          lon: `${longitude}`,\n          cnt: '8',\n          units: 'metric'\n        },\n        headers: {\n          'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\n          'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\n        }\n      };\n      let forecast = await axios.request(options);\n      let weather = await axios({\n        url: `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=fe3c983df64d3e2dd4227bf73441ae78&units=metric`\n      });\n      let weatherData = weather.data;\n      let forecastData = forecast.data;\n      let payload = {\n        weatherData,\n        forecastData\n      };\n      dispatch(getdatasuccess(payload));\n    } catch (e) {\n      console.log(e);\n      dispatch(getdataerror());\n    }\n  };\n\n  const Error = err => {\n    console.warn(`Error(${err.code}):(${err.message})`);\n  }; // navigator.geolocation.getCurrentPosition(location,Error);\n\n\n  navigator.geolocation.getCurrentPosition(location, Error);\n}\n_c2 = GetweatherByLocation;\nexport async function update(toast, dispatch, name) {\n  try {\n    const axios = require(\"axios\");\n\n    const options = {\n      method: 'GET',\n      url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\n      params: {\n        q: `${name}`,\n        // lat: '35',\n        // lon: '139',\n        cnt: '8',\n        units: 'metric'\n      },\n      headers: {\n        'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\n        'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\n      }\n    };\n    let forecast = await axios.request(options);\n    let weather = await axios({\n      url: `https://api.openweathermap.org/data/2.5/weather?q=${name}&=&appid=fe3c983df64d3e2dd4227bf73441ae78&units=metric`\n    });\n    let weatherData = weather.data;\n    let forecastData = forecast.data;\n    let payload = {\n      weatherData,\n      forecastData\n    };\n    dispatch(getdatasuccess(payload));\n  } catch (e) {\n    console.log(e);\n    dispatch(getdataerror());\n  }\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetweatherByCity\");\n$RefreshReg$(_c2, \"GetweatherByLocation\");","map":{"version":3,"names":["axios","AppContext","myToast","useContext","GET_DATA_ERROR","GET_DATA_SUCCESS","GET_DATA_LOADING","getdataloading","type","getdatasuccess","payload","getdataerror","GetweatherByCity","e","dispatch","toast","require","options","method","url","params","q","cnt","units","headers","forecast","request","weather","weatherData","data","forecastData","console","log","GetweatherByLocation","location","position","latitude","longitude","coords","lat","lon","Error","err","warn","code","message","navigator","geolocation","getCurrentPosition","update","name"],"sources":["C:/Users/gudekota sudeep/Desktop/PROJECTS/weather-app/weather/src/Components/Actions.jsx"],"sourcesContent":["import axios from \"axios\"\r\nimport { AppContext } from \"../Context/AppContext\";\r\nimport { myToast } from \"../Extras/Extras\";\r\nimport { useContext } from \"react\";\r\nimport { GET_DATA_ERROR , GET_DATA_SUCCESS, GET_DATA_LOADING } from \"./Actiontypes\";\r\n\r\n\r\n\r\nconst getdataloading = ()=>{\r\n  return {type:GET_DATA_LOADING};\r\n}\r\n\r\nconst getdatasuccess = (payload)=>{\r\n  return {type:GET_DATA_SUCCESS,payload}\r\n}\r\n\r\nconst getdataerror = ()=>{\r\n  return {type:GET_DATA_ERROR}\r\n}\r\n\r\nexport async function GetweatherByCity(e,dispatch,toast){\r\n \r\ntry{\r\nconst axios = require(\"axios\");\r\n\r\nconst options = {\r\n  method: 'GET',\r\n  url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\r\n  params: {\r\n    q: `${e}`,\r\n    // lat: '35',\r\n    // lon: '139',\r\n     cnt: '8',\r\n    units: 'metric'\r\n  },\r\n  headers: {\r\n    'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\r\n    'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\r\n  }\r\n};\r\n\r\n \r\n   let forecast =  await axios.request(options)\r\n  \r\n    \r\n  let weather = await axios(\r\n    {url:`https://api.openweathermap.org/data/2.5/weather?q=${e}&=&appid=fe3c983df64d3e2dd4227bf73441ae78&units=metric`}\r\n     )\r\n\r\n   let weatherData = weather.data\r\n   let forecastData = forecast.data\r\n     let payload = { weatherData , forecastData};\r\n   \r\n    dispatch(getdatasuccess(payload))\r\n    myToast(toast,\"City Weather Data Updated\" , \"\")\r\n    }\r\n\r\n   catch(e){\r\n      console.log(e);\r\n      dispatch(getdataerror());\r\n   } \r\n\r\n   \r\n } \r\n\r\n\r\n\r\nexport default function GetweatherByLocation(toast,dispatch){\r\n  \r\n  const location = async (position)=>{\r\n    try{\r\n     \r\n    const {latitude,longitude} = position.coords;\r\n   \r\n    dispatch(getdataloading());\r\n    const options = {\r\n      method: 'GET',\r\n      url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\r\n      params: {\r\n         lat: `${latitude}`,\r\n         lon: `${longitude}`,\r\n         cnt: '8',\r\n        units: 'metric'\r\n      },\r\n      headers: {\r\n        'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\r\n        'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\r\n      }\r\n    };\r\n    let forecast =  await axios.request(options)\r\n    let weather = await axios(\r\n      {url:`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=fe3c983df64d3e2dd4227bf73441ae78&units=metric`}\r\n       )\r\n  \r\n     let weatherData = weather.data\r\n     let forecastData = forecast.data\r\n       let payload = { weatherData , forecastData};\r\n       dispatch(getdatasuccess(payload))\r\n     \r\n  }\r\n  catch(e){\r\n    console.log(e);\r\n    dispatch(getdataerror());\r\n  }\r\n}\r\n\r\nconst Error = (err)=>{\r\n   console.warn(`Error(${err.code}):(${err.message})`)\r\n  \r\n}\r\n// navigator.geolocation.getCurrentPosition(location,Error);\r\nnavigator.geolocation.getCurrentPosition(location, Error);\r\n}\r\n\r\n\r\nexport async function update(toast,dispatch,name){\r\n  try{\r\n    const axios = require(\"axios\");\r\n    \r\n    const options = {\r\n      method: 'GET',\r\n      url: 'https://community-open-weather-map.p.rapidapi.com/forecast/daily',\r\n      params: {\r\n        q: `${name}`,\r\n        // lat: '35',\r\n        // lon: '139',\r\n         cnt: '8',\r\n        units: 'metric'\r\n      },\r\n      headers: {\r\n        'X-RapidAPI-Key': '12aa19a7d5mshac01930e68c38e9p122ad4jsnca3f38e9bed8',\r\n        'X-RapidAPI-Host': 'community-open-weather-map.p.rapidapi.com'\r\n      }\r\n    };\r\n    \r\n     \r\n       let forecast =  await axios.request(options)\r\n      \r\n        \r\n      let weather = await axios(\r\n        {url:`https://api.openweathermap.org/data/2.5/weather?q=${name}&=&appid=fe3c983df64d3e2dd4227bf73441ae78&units=metric`}\r\n         )\r\n    \r\n       let weatherData = weather.data\r\n       let forecastData = forecast.data\r\n         let payload = { weatherData , forecastData};\r\n       \r\n        dispatch(getdatasuccess(payload))\r\n       \r\n        }\r\n    \r\n       catch(e){\r\n          console.log(e);\r\n          dispatch(getdataerror());\r\n       } \r\n    \r\n       \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}